#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
#define FAST ios::sync_with_stdio(0), cin.tie(0), cout.tie(0)

//                        kadane algorithm
/*
The idea of Kadane’s algorithm is to maintain 
a variable max_ending_here that stores the maximum sum 
contiguous subarray ending at current index and
a variable max_so_far stores the maximum sum 
of contiguous subarray found so far, Everytime there is
a positive-sum value in max_ending_here compare it 
with max_so_far and update max_so_far if it is greater than max_so_far.
*/
//     Pseudocode of Kadane’s algorithm:
/*
Initialize:
    max_so_far = INT_MIN
    max_ending_here = 0

Loop for each element of the array

  (a) max_ending_here = max_ending_here + a[i]
  (b) if(max_so_far < max_ending_here)
            max_so_far = max_ending_here
  (c) if(max_ending_here < 0)
            max_ending_here = 0
return max_so_far
*/
void solve() {
   int n;
   cin>>n;
   vector<int>v(n);
   for(int i=0;i<n;i++)
   {
       cin>>v[i];
   }
   ll ans=LLONG_MIN;
   ll sum=0;
   for(int i=0;i<n;i++)
   {
      sum+=v[i];
      ans=max(ans,sum);
      sum=max(sum,0LL);
   
   }
   cout<<ans<<endl;
}

int main()
{
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif
    FAST;
    srand(time(0));
    ll tt = 1;
    //cin >> tt;
    while (tt--)
        solve();
    return 0;
}
